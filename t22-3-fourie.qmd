```{shinylive-python}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 600

import numpy as np
import matplotlib.pyplot as plt
from shiny import *
#plt.style.use('seaborn-darkgrid')

style = "margin:0; padding:0;"
app_ui = ui.page_fluid(
    ui.tags.style(
        """
        .input-text {
            border: 1px solid black;
            border-radius: 5px;
            background-color: #eee;
            padding: 0px;
            margin: 0px;
        }
        """
    ),
    # ui.h2({"style": "text-align: center;"}, "App Title"),
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.row(
                ui.column(6, ui.input_text('a0', None, placeholder='a₀')),        
            ),
            ui.row(
                ui.column(6, ui.input_text('a1', None, placeholder='a₁')),        
                ui.column(6, ui.input_text('b1', None, placeholder='b₁')),
            ),
            ui.row(
                ui.column(6, ui.input_text('a2', None, placeholder='a₂')),        
                ui.column(6, ui.input_text('b2', None, placeholder='b₂')),
            ),  
            ui.row(
                ui.column(6, ui.input_text('a3', None, placeholder='a₃')),        
                ui.column(6, ui.input_text('b3', None, placeholder='b₃')),
            ),
            ui.row(
                ui.column(6, ui.input_text('a4', None, placeholder='a₄')),        
                ui.column(6, ui.input_text('b4', None, placeholder='b₄')),
            ),
            ui.row(
                ui.column(6, ui.input_text('a5', None, placeholder='a₅')),        
                ui.column(6, ui.input_text('b5', None, placeholder='b₅')),
            ),
            ui.row(
                ui.column(6, ui.input_text('a6', None, placeholder='a₆')),        
                ui.column(6, ui.input_text('b6', None, placeholder='b₆')),
            ),
            ui.row(
                ui.column(6, ui.input_text('a7', None, placeholder='a₇')),        
                ui.column(6, ui.input_text('b7', None, placeholder='b₇')),
            ),
            ui.row(
                ui.column(6, ui.input_text('a8', None, placeholder='a₈')),        
                ui.column(6, ui.input_text('b8', None, placeholder='b₈')),
            ),
            ui.row(
                ui.column(6, ui.input_text('a9', None, placeholder='a₉')),        
                ui.column(6, ui.input_text('b9', None, placeholder='b₉')),
            ),
        ),
        ui.panel_main(
            ui.output_plot("plot"),
        ),
    ),
)

xs = np.linspace(-np.pi, np.pi, 100)

f = lambda x: x+1
f = lambda x: np.abs(x)
f = lambda x: np.sign(x)
nf = np.vectorize(f)

def get_float(s):
    if s == '': return 0
    try:
        return float(s)
    except ValueError:
        num, denom = s.split('/')
        return float(num) / float(denom)

def server(input, output, session):
    @output
    @render.plot(alt="")
    def plot():
        a0 = get_float(input.a0())
        a1 = get_float(input.a1()); b1 = get_float(input.b1())
        a2 = get_float(input.a2()); b2 = get_float(input.b2())
        a3 = get_float(input.a3()); b3 = get_float(input.b3())
        a4 = get_float(input.a4()); b4 = get_float(input.b4())
        a5 = get_float(input.a5()); b5 = get_float(input.b5())
        a6 = get_float(input.a6()); b6 = get_float(input.b6())
        a7 = get_float(input.a7()); b7 = get_float(input.b7())
        a8 = get_float(input.a8()); b8 = get_float(input.b8())
        a9 = get_float(input.a9()); b9 = get_float(input.b9())

        fig, ax = plt.subplots(figsize=(12,8))
        #ax.set_xlabel('x')
        #ax.set_ylabel('y')
        ax.set_xlim(-3.5, 3.5)
        ax.set_ylim( -2, 4.5)
        ax.set_xticks([-np.pi, -np.pi/2,0, np.pi/2, np.pi])
        ax.set_xticklabels(['-π', '-π/2', '0', 'π/2', 'π'])
        ax.plot(xs, nf(xs))
        
        ax.plot(xs, a0+
            a1*np.cos(1*xs)+b1*np.sin(1*xs)+\
            a2*np.cos(2*xs)+b2*np.sin(2*xs)+\
            a3*np.cos(3*xs)+b3*np.sin(3*xs)+\
            a4*np.cos(4*xs)+b4*np.sin(4*xs)+\
            a5*np.cos(5*xs)+b5*np.sin(5*xs)+\
            a6*np.cos(6*xs)+b6*np.sin(6*xs)+\
            a7*np.cos(7*xs)+b7*np.sin(7*xs)+\
            a9*np.cos(8*xs)+b8*np.sin(8*xs)+\
            a9*np.cos(9*xs)+b9*np.sin(9*xs)
        )

app = App(app_ui, server, debug=True)
```